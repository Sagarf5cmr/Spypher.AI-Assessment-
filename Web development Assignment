<template>
  <div class="min-h-screen bg-gray-100">
    <header class="p-4 bg-white shadow">
      <h1 class="text-2xl font-bold text-gray-700">Product Listing</h1>
      <div class="mt-4">
        <input
          v-model="searchQuery"
          type="text"
          class="w-full p-2 border rounded"
          placeholder="Search products..."
        />
      </div>
    </header>

    <main class="p-4">
      <div v-if="loading" class="text-center">
        <p>Loading...</p>
      </div>
      <div v-else>
        <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
          <ProductCard
            v-for="product in filteredProducts"
            :key="product.id"
            :product="product"
          />
        </div>
      </div>

      <div v-if="hasMore" class="text-center mt-4">
        <button @click="loadMore" class="btn-primary">Load More</button>
      </div>
    </main>
  </div>
</template>

<script lang="ts">
import { defineComponent, ref, onMounted, computed } from "vue";
import { createClient } from "@supabase/supabase-js";
import ProductCard from "~/components/ProductCard.vue";

const supabaseUrl = "https://<your-supabase-url>.supabase.co";
const supabaseKey = "<your-supabase-key>";
const supabase = createClient(supabaseUrl, supabaseKey);

export default defineComponent({
  components: { ProductCard },
  setup() {
    const products = ref([]);
    const loading = ref(false);
    const page = ref(1);
    const limit = 10;
    const hasMore = ref(true);
    const searchQuery = ref("");

    const fetchProducts = async () => {
      loading.value = true;
      const { data, error } = await supabase
        .from("products")
        .select("*")
        .order("id", { ascending: true })
        .range((page.value - 1) * limit, page.value * limit - 1);
      loading.value = false;

      if (error) {
        console.error("Error fetching products:", error.message);
        return;
      }

      if (data.length < limit) hasMore.value = false;
      products.value = [...products.value, ...data];
    };

    const loadMore = () => {
      page.value++;
      fetchProducts();
    };

    const filteredProducts = computed(() =>
      products.value.filter((product) =>
        product.name.toLowerCase().includes(searchQuery.value.toLowerCase())
      )
    );

    onMounted(fetchProducts);

    return {
      products,
      loading,
      page,
      limit,
      hasMore,
      fetchProducts,
      loadMore,
      searchQuery,
      filteredProducts,
    };
  },
});
</script>

<style>
.btn-primary {
  @apply bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600;
}
</style>
<template>
  <div class="p-4 bg-white rounded-lg shadow">
    <img
      v-if="product.image_url"
      :src="product.image_url"
      alt="Product image"
      class="w-full h-48 object-cover rounded"
    />
    <h2 class="mt-4 text-lg font-bold">{{ product.name }}</h2>
    <p class="text-gray-600">{{ product.description }}</p>
    <p class="mt-2 text-xl font-semibold text-blue-500">${{ product.price }}</p>
  </div>
</template>

<script lang="ts">
import { defineComponent, PropType } from "vue";

export default defineComponent({
  props: {
    product: {
      type: Object as PropType<{
        id: number;
        name: string;
        description: string;
        price: number;
        image_url?: string;
      }>,
      required: true,
    },
  },
});
</script>
module.exports = {
  content: [
    "./components/**/*.{vue,js,ts}",
    "./pages/**/*.{vue,js,ts}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
CREATE TABLE products (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT NOT NULL,
  price NUMERIC NOT NULL,
  image_url TEXT
);

INSERT INTO products (name, description, price, image_url)
VALUES 
('Product 1', 'Description for product 1', 29.99, 'https://via.placeholder.com/150'),
('Product 2', 'Description for product 2', 19.99, 'https://via.placeholder.com/150'),
('Product 3', 'Description for product 3', 49.99, NULL);

import { defineNuxtConfig } from "nuxt";

export default defineNuxtConfig({
  ssr: false,
  css: ["~/assets/css/tailwind.css"],
  buildModules: ["@nuxt/typescript-build", "@nuxt/postcss8"],
  postcss: {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  },
  runtimeConfig: {
    public: {
      supabaseUrl: process.env.SUPABASE_URL,
      supabaseKey: process.env.SUPABASE_KEY,
    },
  },
});
